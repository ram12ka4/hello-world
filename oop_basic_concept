
Important Article : must read first
https://codingsec.net/2016/05/oop-required-programmers-life/


1.    What is the difference between Function and Method ?
      Ans : A function is a piece of code that is called by name. 
            It can be passed data to operate on (i.e. the parameters) 
            and can optionally return data (the return value). 
            All data that is passed to a function is explicitly passed.

      A method is a piece of code that is called by a name that is associated with an object. 
      In most respects it is identical to a function except for two key differences:

      A method is implicitly passed the object on which it was called.
      A method is able to operate on data that is contained within the class 
      (remembering that an object is an instance of a class - the class is the definition, the object is an instance of that data).

2.    What is the difference beteen Formal Parameter and Actual Argument ?
      Ans : Argument is often used in the sense of "actual argument" vs. "formal parameter".

      The formal parameter is what's given in the function declaration/definition/prototype, 
      the actual argument is what's passed when calling the function, an instance of a formal parameter, if you will.

      That being said, they're often used interchangably, or depending on language/community,
      and I've also heard "actual parameter" &c.

      So here, x and y would be formal parameters:

      int foo(int x, int y) {
          ...
      }

      Whereas here, in the function call, 5 and z are the actual arguments:

      foo(5, z);
3.    Difference between Type and Class.
      
      Ans : A class is a type. An interface is a type. A primitive is a type. An array is a type.

      Therefore, every type is also either a class (including an enum constant), an interface, a primitive, or an array.

      There are two distinct categories of types: primitive types and reference types:

      A variable of primitive type always holds a primitive value of that same type. Such a value can only be changed by assignment operations on that variable.
      A variable of reference type always holds the value of a reference to an object. All objects, including arrays, support the methods of class Object. The reference types are class types (including enum types), interface types, and array types.
      Every piece of data has a type which defines its structure, namely how much memory it takes up, how it is laid out, and more importantly, how you can interact with it.

      Examples of primitive types:

      int
      float
      char
      boolean
      Examples of class types:

      String
      Integer
      Boolean
      ArrayList
      StringBuilder
      Examples of interface types:

      Collection
      List
      Map
      Serializable
      Examples of array types:

      int[]
      String[]
      Integer[][][]
      Basically, anything that you can refer to as a variable has a type, and classes are a kind of a type.

      More info here: http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html

 4.   Why “private” methods in the object oriented?
      
      Ans :  Lot of good answers, but maybe one more from a self-taught Java programmer as I went through all that by myself with a lot of pain ;)

      Think about a Class as something seen from the outside, not as something you see internally. If you look at a Class from the outside, what you see?

      Taking the clock as an example again, a clock can give you info about the current time and it can be set up to show the right time.

      So looking at things from the outside, a clock is a machine that can do those two things; public methods we call them.

      But we as constructors of this clock we know that before any time operation we have to switch from 23 to 11 on our display (it's that kind of clock), so we have to rearrange things internally a bit to do so. Changing from 23 to 11 works just fine for us in both cases - setting the clock and showing the current time - but we do it "on the side" as the user doesn't have to know about all that complicated math. These are private methods!

      So our Clock Class could have two public methods (showTime and setTime) which are all that the user wants to see, and a private method (recountTime) that provides functionality for these public methods and are something that the user doesn't want to see.

      So on the one hand, you should keep in mind that private is what won't be reimplemented and accessed by future programmers using your code (as was pointed at in the answers above). But private also means things done on the side, so the user don't see it. That's why we call the public methods a public interface - it's all the user will see from the outside.

      For me it is helpful (I'm self-taught, so maybe it's not a very popular methodology...) to write down everything the users (real users and other Classes) will do with my Class (public interface with just public methods' signatures), then to write the signatures of private methods that I-the-implementer will use to accomplish the public goals that promised to provide to my users and then just fulfill it with code.

      It can be helpful to keep in mind that the old C rule is still valid (as was expressed in 97 Things Every Programmer Should Know): a function/method should be just a few lines long, really!!



